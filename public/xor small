<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@2.3.0"> </script> 

 

 
<input id="myButton123" type="button" value="xOr using Keras Layers" onclick="{
                                                                                     
  (async function myGo() {
    document.getElementById('myButton123').style.backgroundColor = 'red'  
    const model = tf.sequential();

    model.add(tf.layers.dense({inputShape: [2],  units: 10, activation: 'sigmoid',}) );  // 2 inputs to 10 hidden layer nodes
    model.add(tf.layers.dense({inputShape: [10], units: 1,  activation: 'sigmoid',}) );  // from the 10 hidden layer nodes to 1 output layer                                                                                  
    const myOptimizer = tf.train.sgd(0.5); 
                                                                                               
    model.compile({optimizer: myOptimizer, loss: 'meanSquaredError'});    

    const xTrainingData   = tf.tensor2d([[0,0], [0,1], [1,0], [1,1]]);      // array defines shape  // note should also add , 'int32'
    const yTrainingTarget = tf.tensor2d([0,1,1,0], shape=[4,1]);            // needs shape defined
                                                                                 
    var myFit = await model.fit(xTrainingData, yTrainingTarget, {
        batchSize : 4,
        epochs    : 3000,                                                                      
        callbacks:  { 
          onEpochEnd: async (epoch, logs) => {                                                                                         
            document.getElementById('myDiv123').innerHTML = 'Epoch # ' + (epoch+1) + '/3000, Loss: ' + logs.loss + '<br><br>'
            await tf.nextFrame();  // This improves UI responsiveness during training.  
          }    // end onEpochEnd callback 
        }      // end all callbacks                                                              
      })       // end model.fit                                                                                      
                                                                                
    const myPredictArray = await model.predict(xTrainingData).data()   // just throw all the training data back in
                                                                                    
    document.getElementById('myDiv123').innerHTML += '[0,0] = ' + myPredictArray[0].toFixed(4) +'<br>'
    document.getElementById('myDiv123').innerHTML += '[1,0] = ' + myPredictArray[1].toFixed(4) +'<br>'
    document.getElementById('myDiv123').innerHTML += '[0,1] = ' + myPredictArray[2].toFixed(4) +'<br>'
    document.getElementById('myDiv123').innerHTML += '[1,1] = ' + myPredictArray[3].toFixed(4) +'<br>'
    document.getElementById('myButton123').style.backgroundColor = 'lightgray' 
                                                                              
  } )() // end Async function
                                                                                                                                                                                                                                        
}"><br><br>



<div id='myDiv123'>...</div><br>
